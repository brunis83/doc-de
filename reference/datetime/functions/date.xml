<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d94400847cec608f93830aa85e0761b97d7cb9bf Maintainer: simp Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 089983558f0d09521df6ef09582c451c1ec79ef3 Reviewer: samesch -->
<!-- Credits: sammywg -->
<refentry xml:id="function.date" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>date</refname>
  <refpurpose>Formatiert einen Unix-Zeitstempel</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>date</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>timestamp</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Gibt einen formatierten String anhand eines vorzugebenden Musters zurück.
   Dabei wird entweder der angegebene Unix-Zeitstempel
   <parameter>timestamp</parameter> verwendet oder die gegenwärtige Zeit, wenn
   kein Zeitstempel angegegeben wird. Mit anderen Worten ausgedrückt: Der
   Parameter <parameter>timestamp</parameter> ist optional und wird mit dem
   Wert der Funktion <function>time</function> vorbelegt.
  </para>
  <warning>
   <para>
    Unix-Zeitstempel berücksichtigen keine Zeitzonen. Mit der Klasse
    <classname>DateTimeImmutable</classname> und ihrer Formatierungsmethode
    <methodname>DateTimeInterface::format</methodname> können Datums- und
    Zeitangaben mit einer angehängten Zeitzone formatiert werden.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>format</parameter></term>
    <listitem>
     <para>
      Von <methodname>DateTimeInterface::format</methodname> akzeptiertes Format.
     </para>
     <note>
      <simpara>
       Die Funktion <function>date</function> gibt immer
       <literal>000000</literal> als Mikrosekunden aus, weil sie einen
       Parameter vom Typ <type>int</type> benötigt, während
       <methodname>DateTimeInterface::format</methodname> Mikrosekunden
       unterstützt, wenn ein Objekt vom Typ
       <classname>DateTimeInterface</classname> mit Mikrosekunden erstellt
       wurde.
      </simpara>
     </note>
    </listitem>
   </varlistentry>

   &date.timestamp.description;

  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt eine formatierte Datums-Zeichenkette zurück.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;

  &date.timezone.errors.description;

 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>timestamp</parameter> ist jetzt nullbar.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>date</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
// Die Standard-Zeitzone setzen, die verwendet werden soll.
date_default_timezone_set('UTC');

// Gibt etwas aus wie: Monday
echo date("l");

// Gibt etwas aus wie: Monday 8th of August 2005 03:12:46 PM
echo date('l jS \of F Y h:i:s A');

// Gibt aus: July 1, 2000 ist ein Saturday
echo "July 1, 2000 ist ein " . date("l", mktime(0, 0, 0, 7, 1, 2000));

/* Verwenden von Konstanten im Format-Parameter */
// Gibt etwas aus wie: Wed, 25 Sep 2013 15:28:57 -0700
echo date(DATE_RFC822);

// Gibt etwas aus wie: 2000-07-01T00:00:00+00:00
echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Um zu verhindern, dass ein erkanntes Zeichen im Formatstring ersetzt wird,
   sollte dieses Zeichen mit einem vorangestellten Backslash maskiert werden.
   Ist das Zeichen mit dem Backslash bereits eine spezielle Zeichenfolge, muss
   dieser Backslash ebenso maskiert werden.
   <example>
    <title>Maskieren von Zeichen in <function>date</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Gibt etwas ähnliches aus wie: Wednesday the 15th
echo date('l \t\h\e jS');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Es ist möglich, <function>date</function> und <function>mktime</function>
   gleichzeitig zu verwenden, um Datumsangaben in der Zukunft oder der
   Vergangenheit zu bestimmen.
   <example>
    <title><function>date</function> und <function>mktime</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
$morgen        = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
$letztermonat  = mktime(0, 0, 0, date("m")-1, date("d"),   date("Y"));
$naechstesjahr = mktime(0, 0, 0, date("m"),   date("d"),   date("Y")+1);
?>
]]>
    </programlisting>
   </example>
   <note>
    <para>
     Dieses Vorgehen kann zu verlässlicheren Ergebnissen führen, als simples
     addieren oder subtrahieren der Anzahl von Sekunden in Tagen oder Monaten
     zu einem Zeitstempel, da Sommer- und Winterzeit berücksichtigt werden.
    </para>
   </note>
  </para>
  <para>
   Es folgen einige Beispiele zur <function>date</function>-Formatierung. Es
   ist zu beachten, dass alle anderen Zeichen maskiert werden sollten, da alle
   Zeichen, die im Augenblick eine spezielle Bedeutung haben, unerwünschte
   Resultate liefern. Bei allen weiteren Zeichen kann es durchaus möglich
   sein, dass diesen in zukünftigen PHP-Versionen eine Bedeutung zukommt.
   Beim Maskieren sollte darauf geachtet werden, einfache Anführungszeichen zu
   benutzen, damit Zeichenfolgen wie zum Beispiel \n zu keinem
   Zeilenumbruch führen.
   <example>
    <title><function>date</function>-Formatierungen</title>
    <programlisting role="php">
<![CDATA[
<?php
// Angenommen, heute ist der 10. März 2001, 17:16:18 Uhr und wir
// befinden uns in der Zeitzone Mountain Standard Time (MST)

$heute = date("F j, Y, g:i a");                 // March 10, 2001, 5:16 pm
$heute = date("m.d.y");                         // 03.10.01
$heute = date("j, n, Y");                       // 10, 3, 2001
$heute = date("Ymd");                           // 20010310
$heute = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01
$heute = date('\i\t \i\s \t\h\e jS \d\a\y.');   // it is the 10th day.
$heute = date("D M j G:i:s T Y");               // Sat Mar 10 17:16:18 MST 2001
$heute = date('H:m:s \m \i\s\ \m\o\n\t\h');     // 17:03:18 m is month
$heute = date("H:i:s");                         // 17:16:18
$heute = date("Y-m-d H:i:s");                   // 2001-03-10 17:16:18 (Das MySQL DATETIME Format)
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Um Datumsangaben in anderen Sprachen auszugeben, kann
   <methodname>IntlDateFormatter::format</methodname> statt
   <function>date</function> verwendet werden.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Um einen Zeitstempel aus einer Textrepräsentation eines Datums zu
    erzeugen, kann die Funktion <function>strtotime</function> verwendet
    werden. Einige Datenbanken haben außerdem Funktionen, mit denen ihre
    Datumsformate in Zeitstempel konvertiert werden können (wie &zb; die
    Funktion <link xlink:href="&url.mysql.docs.date;">UNIX_TIMESTAMP</link>
    von MySQL).
   </para>
  </note>
  <tip>
   <para>
    Der Zeitstempel des Verarbeitungsbeginns der HTTP-Anfrage wird in
    <varname>$_SERVER['REQUEST_TIME']</varname> bereitgestellt.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>DateTimeImmutable::__construct</methodname></member>
    <member><methodname>DateTimeInterface::format</methodname></member>
    <member><function>gmdate</function></member>
    <member><function>idate</function></member>
    <member><function>getdate</function></member>
    <member><function>getlastmod</function></member>
    <member><function>mktime</function></member>
    <member><methodname>IntlDateFormatter::format</methodname></member>
    <member><function>time</function></member>
    <member><link linkend="datetimeinterface.constants.types">Vordefinierte DateTime-Konstanten</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
